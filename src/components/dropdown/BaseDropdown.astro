---
import BaseButton from '../buttons/BaseButton.astro';

interface Props {
  id?: string;
  value?: string;
  placeholder?: string;
  class?: string;
  disabled?: boolean;
  required?: boolean;
  name?: string;
  fullWidth?: boolean;
}

const { 
  id,
  value,
  placeholder = "Seleziona un'opzione",
  class: className = "",
  disabled = false,
  required = false,
  name,
  fullWidth = false,
  ...props 
} = Astro.props;
---

<!-- Custom dropdown sempre utilizzato -->
<div class={`custom-dropdown relative ${fullWidth ? 'w-full' : 'inline-block w-auto'} ${className}`} data-dropdown-id={id}>
  <!-- Hidden input for form submission -->
  <input type="hidden" name={name} value={value} id={id} />
  <!-- Trigger button -->
  <button
    type="button"
    onclick="console.log('Button clicked directly!'); this.nextElementSibling.classList.toggle('hidden');"
    class={`
      custom-dropdown-trigger text-left
      ${fullWidth ? 'w-full' : 'w-auto min-w-max'}
      px-4 py-3
      bg-[var(--color-dropdown-background)]
      text-[var(--color-dropdown-text)]
      border border-[var(--color-dropdown-border)]
      rounded-xl
      focus:outline-none
      focus:ring-2
      focus:ring-[var(--color-focus)]
      focus:border-[var(--color-focus)]
      transition-all duration-200
      cursor-pointer
      font-[var(--font-default)]
      hover:shadow-lg
      hover:-translate-y-0.5
      disabled:opacity-50
      disabled:cursor-not-allowed
      disabled:hover:translate-y-0
      disabled:hover:shadow-none
      pr-12
      flex items-center gap-2
      relative
    `}
    disabled={disabled}
    aria-haspopup="listbox"
    aria-expanded="false"
  >
    <!-- Contenuto del trigger che verrà gestito automaticamente dal JavaScript -->
    <span class="selected-content flex items-center gap-2">
      {value ? (
        <slot name="selected" />
      ) : (
        <span class="text-[var(--color-input-placeholder)]">{placeholder}</span>
      )}
    </span>
      <!-- Dropdown arrow integrato nel button -->
    <svg class="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none text-[var(--color-dropdown-text)] transition-transform duration-200" width="12" height="8" viewBox="0 0 12 8" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M1 1.5L6 6.5L11 1.5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
  </button>
    <!-- Dropdown menu -->
  <div class={`
    custom-dropdown-menu absolute z-50 mt-1
    w-max min-w-full max-w-[90vw]
    bg-[var(--color-dropdown-background)]
    border border-[var(--color-dropdown-border)]
    rounded-xl
    shadow-lg
    max-h-60 overflow-y-auto
    hidden
    scrollbar-thin scrollbar-track-transparent scrollbar-thumb-[var(--color-first)]
  `}>
    <!-- Le opzioni verranno populate dal JavaScript analizzando lo slot -->
    <slot />
  </div>
</div>

<script>
  // Custom dropdown functionality
  function initializeDropdowns() {
    console.log('Initializing dropdowns...');
    const customDropdowns = document.querySelectorAll('.custom-dropdown');
    console.log('Found dropdowns:', customDropdowns.length);
    
    customDropdowns.forEach((dropdown, index) => {
      console.log(`Processing dropdown ${index}:`, dropdown);
      const trigger = dropdown.querySelector('.custom-dropdown-trigger') as HTMLButtonElement;
      const menu = dropdown.querySelector('.custom-dropdown-menu') as HTMLElement;
      const hiddenInput = dropdown.querySelector('input[type="hidden"]') as HTMLInputElement;
      const arrow = dropdown.querySelector('svg') as SVGElement;
      
      console.log('Elements found:', { trigger, menu, hiddenInput, arrow });
      
      if (!trigger || !menu || !hiddenInput) {
        console.log('Missing elements, skipping dropdown');
        return;
      }
      
      // Funzione per processare le opzioni dallo slot
      function processSlotOptions() {
        const slotElements = menu.children;
        const processedOptions: Array<{element: Element, value: string, hasImage: boolean, text: string}> = [];
        
        Array.from(slotElements).forEach(element => {
          // Cerca data-value o value attribute
          const value = element.getAttribute('data-value') || 
                       element.getAttribute('value') || 
                       (element as HTMLOptionElement).value || '';
          
          // Verifica se ha immagini
          const hasImage = element.querySelector('img') !== null;
          
          // Ottieni il testo
          const text = element.textContent?.trim() || '';
          
          if (value || text) {
            processedOptions.push({ element, value, hasImage, text });
            
            // Aggiungi event listener se non è già un button
            if (element.tagName !== 'BUTTON') {
              // Converti l'elemento in un button se necessario
              const button = document.createElement('button');
              button.type = 'button';
              button.className = `
                custom-dropdown-option text-left px-4 py-3
                w-full whitespace-nowrap flex-shrink-0
                hover:bg-[var(--color-second)]
                focus:bg-[var(--color-second)]
                focus:outline-none
                transition-colors duration-150
                flex items-center gap-2
                first:rounded-t-xl last:rounded-b-xl
              `.replace(/\s+/g, ' ').trim();
              button.setAttribute('data-value', value);
              button.innerHTML = element.innerHTML;
              
              element.parentNode?.replaceChild(button, element);
              processedOptions[processedOptions.length - 1].element = button;
            }
          }
        });
        
        return processedOptions;
      }      // Funzione per calcolare il posizionamento ottimale del dropdown
      function calculateOptimalPosition() {
        const rect = trigger.getBoundingClientRect();
        const menuRect = menu.getBoundingClientRect();
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
        
        // Reset delle classi di posizionamento
        menu.classList.remove('dropdown-bottom', 'dropdown-top', 'dropdown-left', 'dropdown-right');
        menu.style.left = '';
        menu.style.right = '';
        menu.style.top = '';
        menu.style.bottom = '';
        menu.style.transform = '';
        
        // Calcola spazio disponibile
        const spaceBelow = viewportHeight - rect.bottom;
        const spaceAbove = rect.top;
        const spaceRight = viewportWidth - rect.left;
        const spaceLeft = rect.right;
        
        // Altezza stimata del menu (o usa la reale se visibile)
        const menuHeight = menu.scrollHeight || 200;
        const menuWidth = menu.scrollWidth || rect.width;
        
        // Posizionamento verticale
        if (spaceBelow >= menuHeight || spaceBelow >= spaceAbove) {
          // Posiziona sotto
          menu.classList.add('dropdown-bottom');
          menu.style.top = '100%';
          menu.style.marginTop = '4px';
        } else {
          // Posiziona sopra
          menu.classList.add('dropdown-top');
          menu.style.bottom = '100%';
          menu.style.marginBottom = '4px';
        }
        
        // Posizionamento orizzontale
        if (spaceRight >= menuWidth) {
          // Allinea a sinistra (default)
          menu.style.left = '0';
        } else if (spaceLeft >= menuWidth) {
          // Allinea a destra
          menu.style.right = '0';
          menu.style.left = 'auto';
        } else {
          // Centra e limita la larghezza
          const maxWidth = Math.min(viewportWidth * 0.9, menuWidth);
          menu.style.maxWidth = `${maxWidth}px`;
          menu.style.left = '50%';
          menu.style.transform = 'translateX(-50%)';
        }
      }
      
      // Processa le opzioni
      const options = processSlotOptions();
      console.log('Processed options:', options);
      
      // Test click sul trigger
      console.log('Adding click listener to trigger:', trigger);
      console.log('Trigger classes:', trigger.className);
      
      // Aggiungi event listeners alle opzioni
      options.forEach(({ element, value, hasImage, text }) => {
        console.log('Adding click listener to option:', { value, hasImage, text });
        element.addEventListener('click', function() {
          const img = element.querySelector('img');
          
          // Update hidden input
          hiddenInput.value = value;
          
          // Auto-detect layout based on content
          const triggerContent = trigger.querySelector('.selected-content') as HTMLElement;
          if (triggerContent) {
            if (hasImage && text) {
              // Layout con immagine e testo
              triggerContent.innerHTML = element.innerHTML;
              triggerContent.className = 'selected-content flex items-center gap-2';
            } else if (hasImage && !text) {
              // Solo immagine
              triggerContent.innerHTML = img ? img.outerHTML : '';
              triggerContent.className = 'selected-content flex items-center gap-2';
            } else {
              // Solo testo
              triggerContent.textContent = text;
              triggerContent.className = 'selected-content flex items-center gap-2';
            }
          }
          
          // Close dropdown
          menu.classList.add('hidden');
          trigger.setAttribute('aria-expanded', 'false');
          if (arrow) arrow.style.transform = 'translateY(-50%) rotate(0deg)';
          
          // Trigger change event for external listeners
          const changeEvent = new CustomEvent('change', {
            detail: { value: value, label: text, hasImage: hasImage },
            bubbles: true
          });
          dropdown.dispatchEvent(changeEvent);
        });
      });
        // Toggle dropdown
      trigger.addEventListener('click', function(e) {
        console.log('Trigger clicked!', e);
        e.preventDefault();
        e.stopPropagation();
        
        const isOpen = menu.classList.contains('hidden');
        console.log('Menu is open:', !isOpen);
        
        // Close all other dropdowns
        document.querySelectorAll('.custom-dropdown-menu').forEach(otherMenu => {
          if (otherMenu !== menu) {
            otherMenu.classList.add('hidden');
            const otherTrigger = otherMenu.parentElement?.querySelector('.custom-dropdown-trigger') as HTMLButtonElement;
            const otherArrow = otherMenu.parentElement?.querySelector('svg') as SVGElement;
            if (otherTrigger) otherTrigger.setAttribute('aria-expanded', 'false');
            if (otherArrow) otherArrow.style.transform = 'translateY(-50%) rotate(0deg)';
          }
        });
          if (isOpen) {
          console.log('Opening dropdown');
          menu.classList.remove('hidden');
          trigger.setAttribute('aria-expanded', 'true');
          if (arrow) arrow.style.transform = 'translateY(-50%) rotate(180deg)';
          
          // Calcola la posizione ottimale dopo che il menu è visibile
          setTimeout(() => calculateOptimalPosition(), 0);
        } else {
          console.log('Closing dropdown');
          menu.classList.add('hidden');
          trigger.setAttribute('aria-expanded', 'false');
          if (arrow) arrow.style.transform = 'translateY(-50%) rotate(0deg)';
        }
      });
        // Close dropdown when clicking outside
      document.addEventListener('click', function(e) {
        if (!dropdown.contains(e.target as Node)) {
          menu.classList.add('hidden');
          trigger.setAttribute('aria-expanded', 'false');
          if (arrow) arrow.style.transform = 'translateY(-50%) rotate(0deg)';
        }
      });
      
      // Ricalcola posizione al ridimensionamento della finestra
      window.addEventListener('resize', function() {
        if (!menu.classList.contains('hidden')) {
          setTimeout(() => calculateOptimalPosition(), 0);
        }
      });
      
      // Ricalcola posizione allo scroll della pagina
      window.addEventListener('scroll', function() {
        if (!menu.classList.contains('hidden')) {
          setTimeout(() => calculateOptimalPosition(), 0);
        }
      });
      
      // Keyboard navigation
      trigger.addEventListener('keydown', function(e: KeyboardEvent) {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          trigger.click();
        }
      });
      
      // Inizializza il valore selezionato se presente
      if (hiddenInput.value) {
        const selectedOption = options.find(opt => opt.value === hiddenInput.value);
        if (selectedOption) {
          const triggerContent = trigger.querySelector('.selected-content') as HTMLElement;
          if (triggerContent) {
            if (selectedOption.hasImage && selectedOption.text) {
              triggerContent.innerHTML = selectedOption.element.innerHTML;
            } else if (selectedOption.hasImage && !selectedOption.text) {
              const img = selectedOption.element.querySelector('img');
              triggerContent.innerHTML = img ? img.outerHTML : '';
            } else {
              triggerContent.textContent = selectedOption.text;
            }
            triggerContent.className = 'selected-content flex items-center gap-2';
          }
        }      }
    });
  }

  // Multiple initialization strategies
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeDropdowns);
  } else {
    initializeDropdowns();
  }
  
  // Fallback initialization after a short delay
  setTimeout(initializeDropdowns, 100);
</script>

<style>
  /* Posizionamento dinamico del dropdown */
  .custom-dropdown-menu.dropdown-top {
    transform-origin: bottom;
  }
  
  .custom-dropdown-menu.dropdown-bottom {
    transform-origin: top;
  }
  
  .custom-dropdown-menu.dropdown-left {
    transform-origin: right;
  }
  
  .custom-dropdown-menu.dropdown-right {
    transform-origin: left;
  }
  
  /* Fallback for browsers that don't support CSS custom properties */
  @supports not (color: var(--color-dropdown-background)) {
    .custom-dropdown-trigger {
      background-color: #faeeee;
      color: #5d5470;
      border-color: #859688;
    }
    
    .custom-dropdown-trigger:focus {
      border-color: #ffab89;
    }
    
    .custom-dropdown-menu {
      background-color: #faeeee;
      border-color: #859688;
    }
    
    .custom-dropdown-option:hover {
      background-color: #b3cab6;
    }
  }
</style>

