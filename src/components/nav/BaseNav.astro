---
import { TranslationService } from '../../i18n/utils';
import { NavDto } from './nav';
import { BaseStylesTailwind } from '@/base-style/base-styles';
export const prerender = false;
const { jsonNav } = Astro.props;

if (!jsonNav) {
  throw new Error('jsonNav is required');
}

if(!Array.isArray(jsonNav)) {
  throw new Error('jsonNav must be an array');
}

const nav = jsonNav as NavDto[];
if (nav.length === 0) {
  throw new Error('jsonNav must be an array with at least one element');
}

const navItems = nav.map(item => {
  return {
    ...item,
    children: item.children ? item.children.map(child => ({
      ...child,
      children: child.children ? child.children.map(grandChild => ({
        ...grandChild,
      })) : [],
    })) : [],
  };
});

const lang = Astro.params.lang;
const t = TranslationService.useTranslations(lang);

const baseLiClass = '';

---

<nav class="space-x-0">
    <ul class="flex">
        {navItems.map(item => (
        <li class="relative group space-y-0 placeholder-gray-300 p-4 cursor-pointer hover:transition-all hover:duration-500 transition-all duration-150 hover:inset-shadow-menu">
            <a href={item.href} class="text-gray-100">
                {t(item.label)}
            </a>
            {item.children && item.children.length > 0 && (
                <ul class="absolute hidden group-hover:block bg-white shadow-lg">
                    {item.children.map(child => (
                        <li class="relative group">
                            <a href={child.href} class="text-gray-700 hover:text-gray-900">
                                {t(child.label)}
                            </a>
                            {child.children && child.children.length > 0 && (
                                <ul class="absolute hidden group-hover:block bg-white shadow-lg">
                                    {child.children.map(grandChild => (
                                        <li>
                                            <a href={grandChild.href} class="text-gray-700 hover:text-gray-900">
                                                {t(grandChild.label)}
                                            </a>
                                        </li>
                                    ))}
                                </ul>
                            )}
                        </li>
                    ))}
                </ul>
            )}
        </li>
        ))}
    </ul>
</nav>